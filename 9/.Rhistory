c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok")
c=1
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok") else ('no')
c=11
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok") else ('no')
for(j in 100:999){
c=j
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print(n)
}
2/3
func1(2)
func1=function(x){
return x*x
}
func1(2)
func1=function(x){
return(x*x)
}
func1(2)
func1(5)
ls()
func1
func2=function(x){
return(x*x+exp(-x*X))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*X))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,-1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(100000,1,3)
#5
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(1000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func(b1)*(b-a)/n
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func(b1)*rage/n
}
return(s)
}
func(100,1,3)
func
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func2(b1)*rage/n
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func2(b1)*rage/n
}
return(s)
}
func(10000,1,3)
func(100,1,3)
func(100000,1,3)
func(10000000,1,3)
q()
qf(0.5,n,n)
q()
head(iris)
dim(iris)
dat=iris
colnames(dat)=c(paste0('x',1:4),type)
colnames(dat)=c(paste0('x',1:4),'type')
head(da)
head(dat)
cor(dat)
cor(dat[,1:4])
shapiro.test(dat[,1:4])
shapiro.test(dat$x1)
shapiro.test(dat$x2)
shapiro.test(dat$x3)
shapiro.test(dat$x4)
t=rnrom(100)
t=rnorm(100)
shapiro.test(t)
cor(dat[,1:4])
colnames(dat)=c(paste0('x',1:4),'g')
dat
dat$g=rep(1:3,each=50)
head(dat)
attach(dat)
g=factor(g)
plot(dat)
library(MASS)
qda(g~x1+x2+x3+x4)
pd=qda(g~x1+x2+x3+x4)
table(g,predict(g)$class)
table(g,predict(pd)$class)
q()
mx=unlist(by(iris[,1:4],iris[,5],colMeans))
maha.dis=function(x,mx,cs)
{
   k=length(mx)
   dis=numeric(k)
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)(x-unlist(mx[i]))
   index=which.min(dis)
   return(c(dis,index)) 
}
re=t(apply(iris[,1:4],1,maha.dis,mx=mx,cs=cov(iris[,1:4])))  #同协方差
table(iris[,5],re[,4])
re=t(apply(iris[,1:4],1,maha.dis,mx=mx,cs=cov(iris[,1:4])))  #同协方差
mx = by(iris[, 1:4], iris[, 5], colMeans)
maha.dis = function(x, mx, cs) {
    k = length(mx)
    dis = numeric(k)
    for (i in 1:k) {
        mean_vec = as.numeric(mx[[i]])
        dis[i] = t(x - mean_vec) %*% solve(cs) %*% (x - mean_vec)
    }
    index = which.min(di)
    return(c(dis, index))
}
cs = cov(iris[, 1:4])
re = t(apply(iris[, 1:4], 1, maha.dis, mx = mx, cs = cs))
table(iris[, 5], re[, 4])
mx = by(iris[, 1:4], iris[, 5], colMeans)
maha.dis = function(x, mx, cs) {
    k = length(mx)
    dis = numeric(k)
    for (i in 1:k) {
        mean_vec = as.numeric(mx[[i]])
        dis[i] = t(x - mean_vec) %*% solve(cs) %*% (x - mean_vec)
    }
    index = which.min(di)
    return(c(dis, index))
}
cs = cov(iris[, 1:4])
re = t(apply(iris[, 1:4], 1, maha.dis, mx = mx, cs = cs))
table(iris[, 5], re[, 4])
mx = by(iris[, 1:4], iris[, 5], colMeans)
maha.dis = function(x, mx, cs) {
    k = length(mx)
    dis = numeric(k)
    for (i in 1:k) {
        mean_vec = as.numeric(mx[[i]])
        dis[i] = t(x - mean_vec) %*% solve(cs) %*% (x - mean_vec)
    }
    index = which.min(di)
    return(c(dis, index))
}
cs = cov(iris[, 1:4])
re = t(apply(iris[, 1:4], 1, maha.dis, mx = mx, cs = cs))
table(iris[, 5], re[, 4])
mx=unlist(by(iris[,1:4],iris[,5],colMeans))
maha.dis=function(x,mx,cs)
{
   k=length(mx)
   dis=numeric(k)
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)(x-unlist(mx[i]))
   index=which.min(dis)
   return(c(dis,index)) 
}
re=t(apply(iris[,1:4],1,maha.dis,mx=mx,cs=cov(iris[,1:4])))  #同协方差
table(iris[,5],re[,4])
   k=length(mx)
   dis=numeric(k)
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)(x-unlist(mx[i]))
x=iris[,1:4]
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)(x-unlist(mx[i]))
k
dis
x
x-unlist(mx[i])
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)%*%(x-unlist(mx[i]))
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%(solve(cs))%*%(x-unlist(mx[i]))
cs=cov(iris[,1:4])
   for(i in 1:k) dis[i]=t(x-unlist(mx[i]))%*%solve(cs)%*%(x-unlist(mx[i]))
cs
dim(dat)
leng(dat)
length(dat)
head(dat)
func1=function(dat,type)
{
mx=c()
for(i in type){
mx[i]=apply(dat[dat$g==i,],2,mean)
}
}
func1(dat,2)
func1(dat,3)
apply(dat[dat$g==1,],2,mean)
apply(dat[dat$g==1,1:4],2,mean)
func1=function(dat,type)
{
mx=c()
for(i in type){
mx[i]=apply(dat[dat$g==i,1：length(dat)-1],2,mean)
}
func1=function(dat,type)
{
mx=c()
for(i in type){
mx[i]=apply(dat[dat$g==i,1：length(dat)-1],2,mean)
}
}
func1=function(dat,type)
{
mx=c()
for(i in 1:type){
mx[i]=apply(dat[dat$g==i,1：length(dat)-1],2,mean)
}
}
func1=function(dat,type)
{
mx=c()
for(i in 1:type){
mx[i]=apply(dat[dat$g==i,1:length(dat)-1],2,mean)
}
}
func1(dat,3)
func1=function(dat,type)
{
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat)-1)
for(i in 1:type){
mx[i]=apply(dat[dat$g==i,1:length(dat)-1],2,mean)
}
}
func1(dat,3)
mx
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat)-1)
type=3
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat)-1)
mx
func1=function(dat,type)
{
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat))
for(i in 1:type){
mx[i]=apply(dat[dat$g==i,1:length(dat)-1],2,mean)
}
}
func1(dat,3)
mx
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat))
mx=matrix(rep(0,each=length(dat),time=type),nrow=length(dat))
mx
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat))
mx
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat)-1)
mx
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat)-1,byrow=TRUE)
mx
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat),byrow=TRUE)
mx
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat)-1,byrow=TRUE)
mx=matrix(rep(0,each=type,time=length(dat)-1),nrow=length(dat)-1,byrow=TRUE)
mx
mx[1]
func1=function(dat,type)
{
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat))
for(i in 1:type){
mx[,i]=apply(dat[dat$g==i,1:length(dat)-1],2,mean)
}
}
func1=function(dat,type)
{
mx=matrix(rep(0,each=length(dat)-1,time=type),nrow=length(dat)-1)
for(i in 1:type){
mx[,i]=apply(dat[dat$g==i,1:length(dat)-1],2,mean)
}
}
func1(dat,3)
table(dat$g)
tab1=table(dat$g)
tab1[1]
tab1$1
tab1[1]
pd=lda(g~x1+x2+x3+x4)
library(MASS)
pd=lda(g~x1+x2+x3+x4)
attach(dat)
pd=lda(g~x1+x2+x3+x4)
table(g,predict(pd)$class)
ld=lda(g~x1+x2+x3+x4)
table(g,predict(ld)$class)
ld=lda(g~x1+x2+x3+x4,prior=c(1,1,1)/3)
table(g,predict(ld)$class)
Z=predict(ld1)
cbind(g,round(Z$posterior,3),Z$class) #看分类细节
table(g,Z$class)  #混淆矩阵
prop.table(table(g,Z$class),1)  #正确率
Z=predict(ld)
cbind(g,round(Z$posterior,3),Z$class) #看分类细节
table(g,Z$class)  #混淆矩阵
prop.table(table(g,Z$class),1)  #正确率
pd=qda(g~x1+x2+x3+x4,prior=c(1,1,1)/3)
Z=predict(qd)
cbind(g,round(Z$posterior,3),Z$class) #看分类细节
table(g,Z$class)  #混淆矩阵
prop.table(table(g,Z$class),1)  #正确率
pd=qda(g~x1+x2+x3+x4,prior=c(1,1,1)/3)
Z=predict(qd)
Z=predict(pd)
cbind(g,round(Z$posterior,3),Z$class) #看分类细节
table(g,Z$class)  #混淆矩阵
prop.table(table(g,Z$class),1)  #正确率
n=dim(dat[1])
n
n=dim(dat)[1]
n
n=dim(dat)[1]
k=3
ld=lda(g~x1+x2+x3+x4,dat)
ev=ld$svd^2*(k-1)/(n-k)
round(ev,3)
n=dim(dat)[1]
k=3
ld=lda(g~x1+x2+x3+x4,dat)
ev=ld$svd^2*(k-1)/(n-k)
round(ev,3)
prop=ev/sum(ev)
round(prop,4)
round(cumsum(prop),4)
round(ld$scalling,3)
Z=predict(ld)
round(Z$x,3)
plot(Z$x,cex=0)
text(Z$x[,1],Z$x[,2],cex=0.7,g)
q()
