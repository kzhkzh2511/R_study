q()
{
if(a==1) print('skan')
else if(a==10) print('ss')
}
for(i in 1:100){
if(i%2==0) print(i)
}
if(i%2==0) {print(i);next}
}
for(i in 1:100){
if(i%2==0) {print(i);next;}
}
for(i in 1:100){
if(i==2) {print(i);next;}
}
for(i in 1:100){
if(i==2) {print(i);next;}
ok=TRUE;tmp=as.integer(sqrt(i))+1
for(j in 2:tmp)
if(i%%j==0){ok=FALSE;break;}
if(ok) print(i)
}
c=0
for(i in 1:100){
c+=i
}
print(c)
c=0
for(i in 1:100){
c+=i;next;
}
print(c)
c=0
for(i in 1:100){
z=as.integer(sqrt(i))
c+=z;next;
}
print(c)
c=0
for(i in 1:100) c+=z
print(c)
c=0
for(i in 1:100) c+=i
print(c)
for(i in 1:100) c=c+i
print(c)
c=123
n=0
c=as.charctar(c)
c=123
n=0
c=as.charctor(c)
c=as.charcter(c)
c=123
n=0
c=as.chacter(c)
c=as.character(c)
c
c=unlist(strsplit(c,split=''))
c
c=123
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok")
c=1
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok")
c=1
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok") else ('no')
c=11
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print("ok") else ('no')
for(j in 100:999){
c=j
n=c
c=as.character(c)
c=unlist(strsplit(c,split=''))
s=0
for(i in c){
z=as.integer(i);
s=s+z*z*z
}
if(s==n) print(n)
}
2/3
func1(2)
func1=function(x){
return x*x
}
func1(2)
func1=function(x){
return(x*x)
}
func1(2)
func1(5)
ls()
func1
func2=function(x){
return(x*x+exp(-x*X))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*X))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+rage*func2(b1)
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,-1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(b1)
}
func(100000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(100000,1,3)
#5
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(1000,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+b1
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func(b1)*(b-a)/n
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func(b1)*rage/n
}
return(s)
}
func(100,1,3)
func
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func2(b1)*rage/n
}
return(s)
}
func(100,1,3)
func2=function(x){
return(x*x+exp(-x*x))
}
func=function(n,a,b){
s=0
rage=b-a
for(i in 1:n){
b1=rage/n*(i+0.5)+a
s=s+func2(b1)*rage/n
}
return(s)
}
func(10000,1,3)
func(100,1,3)
func(100000,1,3)
func(10000000,1,3)
q()
qf(0.5,n,n)
q()
getwd()
dat=read.table("winequality-red.csv",header=TRUE)
dat=read.table("winequality-red.csv",seq=';',header=TRUE)
dat=read.table("winequality-red.csv",sep=';',header=TRUE)
dim(dat)
head(1,dat)
head(dat,1)
dat2=read.table("winequality-white.csv",sep=';',header=TRUE)
head(dat,2)
dim(dat2)
head(dat,1)
dim(dat);dim(dat2);
wdat=cbind(dat,dat2)
wdat=rbind(dat,dat2)
dim(wdat)
head(wdat)
colnames(wdat)=c('fix_a','vol_a','cir_a','sugar','chl','f_s_d','t_s_d','density','ph','sulphates','alcohol','quality')
head(wdat,1)
rep(0:1,2)
rep(0,each=10)
wdat$g=c(rep(0,1599),rep(1,4898))
head(wdat,1)
summary(wdat)
summary(wdat)
summary(wdat)
summary(wdat)
boxplot(wdat)
boxplot(wdat[,g=0])
boxplot(wdat[[g=0],])
boxplot(wdat[,g==0])
boxplot(wdat[,wdat$g==0])
boxplot(wdat[[wdat$g==0],])
boxplot(wdat)
boxplot(wdat)
barplot(wdat)
hist(wdat)
boxplot(wdat)
library(circlize)
install.packages("corrplot")
corr(wdat)
cor(wdat)
corr=cor(wdat)
library(corrplot)
corrplot(corr)
corrplot(corr,method = c('number'))
corrplot(corr,addCoef.col = 'black')
corrplot(corr,method='color',addCoef.col = 'black')
dat3=rbind(dat,dat2)
colnames(dat3)=c('fix_a','vol_a','cir_a','sugar','chl','f_s_d','t_s_d','density','ph','sulphates','alcohol','quality')
lm=lm(quality~.,dat3)
summary(lm)
summary(lm)
lm.2=step(lm,direction="backward")
summary(lm.2)
lm.2=step(lm.1,direction="forward")
lm.1=lm(quality~1,dat3)
lm.2=step(lm.1,direction="forward")
lm.2=step(lm,direction="forward")
lm.2=step(lm,direction="backward")
lm.2=step(lm.2,direction="backward")
lm.2=step(lm,direction="backward")
summary(lm.2)
boxplot(wdat[,1])
dim(dat3)
par(c(3,4))
for(i in 1:12){
boxplot(dat3[,i])
}
mpar(c(3,4))
par(c(3,4))
for(i in 1:12){
boxplot(dat3[,i])
}
par(mfrow=c(3,4))
for(i in 1:12){
boxplot(dat3[,i])
}
par(mfrow=c(3,4))
for(i in 1:12){
boxplot(dat3[,i],title=c('fix_a','vol_a','cir_a','sugar','chl','f_s_d','t_s_d','density','ph','sulphates','alcohol','quality')[i])
}
set.seed(123)
set.seed(123)
train_size <- round(0.8 * nrow(data3))
test_size <- nrow(data3) - train_size
train_rows <- sample(1:nrow(data1), train_size)
# 根据训练集的行索引获取训练集和测试集
train_set <- data1[train_rows, ]
test_set <- data1[-train_rows, ]
train_size <- round(0.8 * nrow(data3))
test_size <- nrow(data3) - train_size
train_rows <- sample(1:nrow(data3), train_size)
# 根据训练集的行索引获取训练集和测试集
train_set <- data3[train_rows, ]
test_set <- data3[-train_rows, ]
train_size <- round(0.8 * nrow(dat3))
test_size <- nrow(dat3) - train_size
train_rows <- sample(1:nrow(dat3), train_size)
# 根据训练集的行索引获取训练集和测试集
train_set <- dat3[train_rows, ]
test_set <- dat3[-train_rows, ]
model_glm <- glm(Y ~ ., data = train_set, family = binomial)
model_glm <- glm(quality ~ ., data = train_set, family = binomial)
df<-dat3[,-12]
res.pca <- prcomp(df,scale. = T)
get_eig(res.pca)
res.pca
res.pca
res.pca
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 40))
#首先我们需要安装下面这两个R包
install.packages("factoextra")
install.packages("FactoMineR")
#加载这两个R包
library(FactoMineR)
library(factoextra)
get_eig(res.pca)
get_eig(res.pca)
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 40))
X<-res.pca$x[,1:4]
data1<-data.frame(X,dat3[,12])
colnames(data1)<-c(paste("X",1:6,sep = ""),"Y")
colnames(data1)<-c(paste("X",1:4,sep = ""),"Y")
# 设置随机数种子，以确保结果可重复
set.seed(123)
# 计算训练集和测试集的观测数量
train_size <- round(0.8 * nrow(data1))
test_size <- nrow(data1) - train_size
# 随机抽样选取训练集的行索引
train_rows <- sample(1:nrow(data1), train_size)
# 根据训练集的行索引获取训练集和测试集
train_set <- data1[train_rows, ]
test_set <- data1[-train_rows, ]
model_glm <- glm(Y ~ ., data = train_set, family = binomial)
data1
model_dt <- rpart(Y~ ., data = train_set)
model_glm <- glm(Y ~ ., data = train_set, family = binomial)
model_glm <- glm(Y/10 ~ ., data = train_set, family = binomial)
library(rpart)
model_dt <- rpart(Y~ ., data = train_set)
predictions_dt <- predict(model_dt, newdata = test_set, type = "class")
summary(model_dt)
predictions_dt <- predict(model_dt, newdata = test_set, type = "class")
confusion_matrix <- table(test_set$Y, predictions_dt)
library(randomForest)
install.packages('randomForest')
library(randomForest)
model_rf <- randomForest(Y ~ ., data = train_set)
predictions_rf <- predict(model_rf, newdata = test_set)
confusion_matrix <- table(test_set$Y, predictions_rf)
print(confusion_matrix)
dim(confusion_matrix)
head(confusion_matrix)
head(confusion_matrix,1)
head(t(confusion_matrix))
r=t(confusion_matrix)
summary(confusion_matrix)
head(t(confusion_matrix))r$predictions_rf
r$predictions_rf
dim(r)
for(i in 2:1234){
r[i,1]=round(r[i,1])
}
head(r)
for(i in 2:1234){
r[i,1]=round(r[i,1],0)
}
head(r)
r
r=as.date.frame(r)
r=as.dateframe(r)
r=as.dataframe(r)
r=as.data.frame(r)
r
head(r)
dim(r)
r=t(confusion_matrix)
predictions_rf <- round(predictions_rf)
confusion_matrix <- table(test_set$Y, predictions_rf)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy
m=confusion_matrix
dim(m)
m=confusion_matrix[2:6,]
m
sum(diag(m)) / sum(confusion_matrix)
q()
